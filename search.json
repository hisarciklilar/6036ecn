[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R-workshops",
    "section": "",
    "text": "Welcome!\nThis workbook is created for the seminar sessions of\n6036ECN Further Econometrics module.\nIt is written using Quarto on RStudio by\nMehtap Hisarciklilar",
    "crumbs": [
      "Welcome!"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction to R",
    "section": "",
    "text": "1.1 R, R Studio and Quarto\nR is a very powerful statistical software that is becoming increasingly popular. Being able to do data analysis using R will very likely increase your employability.\nWarning: R is not like other apps that you have used! It requires coding. You will need to attend the seminar sessions and practice regularly. There will be a lot of struggle, but the result is worth it.\nR, as a programming language, is like any other language: the more you use it, the better you will get. Therefore, make sure to attend the lectures & seminars and engage with the module material. Otherwise, you will struggle to catch-up.\nRStudio has four main windows, that often have more than just one purpose. Figure 1.1 provides a brief description of each RStudio window. We will use all of them during the module, but the most important ones will be the console and the editor pane.",
    "crumbs": [
      "Seminar 1 (21 January 2025)",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "intro.html#r-r-studio-and-quarto",
    "href": "intro.html#r-r-studio-and-quarto",
    "title": "1  Introduction to R",
    "section": "",
    "text": "I list below three apps that you will need to work with this module’s material. I recommend installing these on your computers. Alternatively, you may use Coventry University’s Appsanywhere platform to get access.\nWe will be using R as the statistical analysis tool in this module. For R documentations, support and download links, visit the R Project for Statistical Computing. R is freely available for Linux, MacOS and Windows. Please download the version that matches your computer’s operating system.\nTo facilitate your work with R, I highly recommend to download and install the integrated development environment (IDE) RStudio Desktop from posit. This platform will make it easier for you to write and run R code.\nA final package that I highly recommend you to install is a publishing system, Quarto. You may use Quarto to produce documents in various formats (such as HTML, MS Word, PDF, PowerPoint, etc) while integrating your R code and output. You will easily have the option to change the format of your output as you desire. I will be using Quarto to produce R worksheets for this module. Please visit Quarto for further information and download.\n\nOnce you download Quarto, you will have access to it through RStudio.\n\n\n\n\n\n\n\n\n\nFigure 1.1: RStudio windows and their functions",
    "crumbs": [
      "Seminar 1 (21 January 2025)",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "intro.html#file-organisation",
    "href": "intro.html#file-organisation",
    "title": "1  Introduction to R",
    "section": "1.2 File Organisation",
    "text": "1.2 File Organisation\n\nCreate a folder for this module. This folder should include all module material you download from Aula or other platforms. Group files in sub-folders in a way that you can locate them easily. So for example, 6036ECN-Further-Econometrics may be the name of the folder and then you may have sub-folders such as Lecture-Slides, R-workshops, etc.\nYou should have one folder for R-workshops. I recommend naming this folder as R-workshops and within that folder, create sub-folders as we progress in the module.\nPlease note that my R-workshops folder is located on my desktop. Hence, I will refer to the folder as ~/Desktop/R-workshops. You will need to modify this depending on where you locate your files.\nIf you are using the computers in the lab, it may be best if you create a folder on your OneDrive account as you can easily access this at home and on-campus.\nBefore working on the data, set your working directory. R will save all files in there and, if you want to open a dataset, R will also look in there first. Select the folder you have created for R workshops.\nUse setwd(the_address_you_would_like_to_locate_your_work) in the console to choose your work directory. You may alternatively do this through the menu:\n\nSession –&gt; Set Working Directory –&gt; Choose Directory\nYou will see the console printing this action, which may help you to remember how to use the console next time.\n\nIf you are unsure of in which folder your work is, type getwd() in the console and R will print the current location you are at.",
    "crumbs": [
      "Seminar 1 (21 January 2025)",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "intro.html#getting-help",
    "href": "intro.html#getting-help",
    "title": "1  Introduction to R",
    "section": "1.3 Getting Help",
    "text": "1.3 Getting Help\nIf you should ever struggle with some of R’s commands, a look into R’s help-files can be very helpful. To access the help file, you have to type into the console window ? and then the command name. For example, if you want to know more about the command getwd(), type the following:\n\n?getwd()",
    "crumbs": [
      "Seminar 1 (21 January 2025)",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "basics-of-R.html",
    "href": "basics-of-R.html",
    "title": "2  Basics of R",
    "section": "",
    "text": "2.1 Using R as a calculator\nYou may use R as a calculator. Some examples are given below.\n# Addition\n5 + 4\n\n[1] 9\n# Subtraction\n5 - 4\n\n[1] 1\n# Multiplication\n3 * 6\n\n[1] 18\n# Division\n10 / 2\n\n[1] 5\n# Exponents\n2^3\n\n[1] 8\n# Modulo\n5 %% 2\n\n[1] 1",
    "crumbs": [
      "Seminar 1 (21 January 2025)",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Basics of R</span>"
    ]
  },
  {
    "objectID": "basics-of-R.html#using-r-as-a-calculator",
    "href": "basics-of-R.html#using-r-as-a-calculator",
    "title": "2  Basics of R",
    "section": "",
    "text": "2.1.1 Basic Operators\n\n\n\nOperator\nDescription\n\n\n\n\nArithmetic\n\n\n\n+\nAddition\n\n\n-\nSubtraction\n\n\n*\nMultiplication\n\n\n/\nDivision\n\n\n^ or **\nExponential\n\n\n%%\nModulus\n\n\n% / %\nInteger Division\n\n\nLogic\n\n\n\n&lt;\nLess than\n\n\n&lt;=\nLess than or equal to\n\n\n&gt;\nGreater than\n\n\n&gt;=\nGreater than or equal to\n\n\n==\nExactly equal to\n\n\n!=\nNot equal to\n\n\n!x\nNot x\n\n\nx | y\nx OR y\n\n\nx & y\nx AND y\n\n\n\n\n\n2.1.2 Order of operators\n\nParenthesis\nMultiplication / division\nAddition / subtraction\nMultiplication has the same importance as division. Similarly, addition and subtraction are at the same level. When we need to decide between the two, we apply the operation that shows first from the left to the right.\nUse of parentheses makes it easier to perform the correct operation\nCan you guess the result of the following operation?\n\n8 / 2 * ( 2 + 2)\n\n\n\n8 / 2 * ( 2 + 2)\n\n[1] 16\n\n\n\n8 / 2 * 2 + 2\n\n[1] 10\n\n\n\n100 * 2 + 50 / 2\n\n[1] 225\n\n\n\n(100 * 2) + (50 / 2)\n\n[1] 225",
    "crumbs": [
      "Seminar 1 (21 January 2025)",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Basics of R</span>"
    ]
  },
  {
    "objectID": "basics-of-R.html#storing-information-in-objects",
    "href": "basics-of-R.html#storing-information-in-objects",
    "title": "2  Basics of R",
    "section": "2.2 Storing information in objects",
    "text": "2.2 Storing information in objects\nR lets you save data by storing it inside an R object. An object is a name that you can use to call up stored data.\n\na &lt;- 5\n\na\n\n[1] 5\n\n\n\na + 2\n\n[1] 7\n\n\nIn the example above, we store value of 5 under object a. We then call the value stored under a and sum it with 2.\nNote the use of &lt; together with - . This representation (&lt;-) resembles a backward pointing arrow, and it assigns the value 2 to the object a.\n\nb_vector &lt;- 1:6\nb_vector\n\n[1] 1 2 3 4 5 6\n\n## [1] 1 2 3 4 5 6\n\nIn the above example, we create a vector, whose elements are numbers from 1 to 6 and store it under b_vector.\nWhen you create an object, the object will appear in the environment pane of RStudio (on the top right-hand-side of the R screen). This pane will show you all of the objects you’ve created since opening RStudio.\n\n2.2.1 Naming of objects\nNote the following;\n\nAn object name cannot start with a number (for example, 2var or 2_var)\nA name cannot use some special symbols, like ^, !, $, @, +, -, /, or * . You may use _\nR is case-sensitive, so name and Name will refer to different objects\nR will overwrite any previous information stored in an object without asking your confirmation. So, be careful while making changes.\nYou can see which object names you have already used by calling the function ls:\n\nls()\n\n[1] \"a\"        \"b_vector\"\n\n## [1] \"a\"        \"b_vector\"\n\n\n\n\n2.2.2 Naming conventions\nYou may see the following styles for naming of variables:\n\nCamel case\n\nCamel case variable naming is common in Javascipt. However, it is considered as bad practise in R. Try to avoid this kind of naming.\n\nbankAccount = 100\n\n\nUse of dots\n\ndot is used in variable names by many R users. However, try to avoid this too because base R uses dots in function names (contrib.url()) and class names (data.frame). Avoiding dot in your variable names will help you avoid confusion, particularly in the initial stages of your learning!\n\nbank.account = 100\n\n\nSnake case\n\nUse of snake case is considered to be good practice. Try to follow this approach.\n\nbank_account = 100\n\nNote that you may find different users of R having a preference towards different styles. The recommendations above are from the “Tidyverse style guide”, which is available from https://style.tidyverse.org.\nStart your variable names with a lower case and reserve the capital letter start for function names!\n\n\n2.2.3 Removing objects\nYou will see that the Environment window can quickly get over-crowded while working interactively. You may remove the objects that you no longer need. by rm(object_name )\n\nrm(a)\n\n\n\n2.2.4 Example of using variables\nLet us calculate the module mark for a student who got 65% from coursework and 53% from exam. The weights for the coursework and exam are, respectively, 25% and 75%.\n\n# let's calculate module mark for a student\ncoursework &lt;- 65\nexam &lt;- 53\nmodule_mark &lt;- coursework * 0.25 + exam * 0.75\n\nprint(module_mark)\n\n[1] 56",
    "crumbs": [
      "Seminar 1 (21 January 2025)",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Basics of R</span>"
    ]
  },
  {
    "objectID": "basics-of-R.html#datatypes-in-r",
    "href": "basics-of-R.html#datatypes-in-r",
    "title": "2  Basics of R",
    "section": "2.3 Datatypes in R",
    "text": "2.3 Datatypes in R\n\n2.3.1 Numeric\nDecimal numbers and integers are part of the numeric class in R.\n\n2.3.1.1 Decimal (floating point values)\n\ndecimal_number &lt;- 2.2\n\n\n\n2.3.1.2 Integer\n\ni &lt;- 5\n\n\n\n\n2.3.2 Logical\nBoolean values (TRUE and FALSE) are part of the logical class in R. These are written in capital letters.\n\nt &lt;- TRUE\nf &lt;- FALSE\n\n\nt\n\n[1] TRUE\n\n\n\nf\n\n[1] FALSE\n\n\n\n\n2.3.3 Characters\nText (string) values are known as characters in R. You may use single or double quotation to create a text (string).\n\nmessage &lt;- \"hello all!\"\nprint(message)\n\n[1] \"hello all!\"\n\n\n\nan_other_message &lt;- 'how are you?'\nprint(an_other_message)\n\n[1] \"how are you?\"\n\n\n\n\n2.3.4 Checking data type classes\nWe can use the class() function to check the data type of a variable:\n\nclass(decimal_number)\n\n[1] \"numeric\"\n\n\n\nclass(i)\n\n[1] \"numeric\"\n\n\n\nclass(t)\n\n[1] \"logical\"\n\n\n\nclass(f)\n\n[1] \"logical\"\n\n\n\nclass(message)\n\n[1] \"character\"",
    "crumbs": [
      "Seminar 1 (21 January 2025)",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Basics of R</span>"
    ]
  },
  {
    "objectID": "data-management-in-R.html",
    "href": "data-management-in-R.html",
    "title": "3  Data Management in R",
    "section": "",
    "text": "3.1 Packages and libraries\nIn order to access specialised data analysis tools in R, we will need to install some R packages.\n“An R package is a collection of functions, data, and documentation that extends the capabilities of base R. Using packages is key to the successful use of R.” (Wickham, Cetinkaya-Rundel, and Grolemund, n.d.)\nWe will start by installing the tidyverse package\n#install.packages(\"tidyverse\")\nTo install tidyverse, type the above line of code in the console, and then press enter to run it. R will download the packages from CRAN and install them on to your computer.\nOnce installed, you may use this package after loading it with the library() function.\n#library(tidyverse)\nYou see above a list of packages that come with tidyverse.\nYou may update tidyverse by running\n#tidyverse_update()",
    "crumbs": [
      "Seminar 2 (28 January 2025)",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data Management in R</span>"
    ]
  },
  {
    "objectID": "data-management-in-R.html#functions",
    "href": "data-management-in-R.html#functions",
    "title": "3  Data Management in R",
    "section": "3.2 Functions",
    "text": "3.2 Functions\nYou may identify functions with the () after the function name. For example, ls() that we used above.\nFunctions may also take arguments. The data that we pass into the function is called the function’s argument. The argument can be raw data, an R object, or even the results of another R function.\n\n# round a number\nround(4.5218)\n\n[1] 5\n\n## 5\n\n# calculate the factorial\nfactorial(3)\n\n[1] 6\n\n## 6\n\n# calculate the mean of values from 1 to 6:\nmean(1:6)\n\n[1] 3.5\n\n## 3.5\n\nround(mean(1:6))\n\n[1] 4\n\n## 4\n\nMany R functions take multiple arguments that help them do their job. You can give a function as many arguments as you like as long as you separate each argument with a comma.\nTo see which arguments a function can take, you may type args in parenthesis after function name:\n\nargs(round)\n\nfunction (x, digits = 0, ...) \nNULL\n\n## function (x, digits = 0) \n## NULL\n\nround(3.1415, digits = 2)\n\n[1] 3.14\n\n## 3.14\n\n\n3.2.1 Basic Functions\n\n\n\n\n\n\n\nFunction\nDescription\n\n\n\n\n?() or help()\nAccess the documentation and help file for a particular function\n\n\ninstall.packages()\nDownload and install an R package\n\n\nlibrary()\nLoads an R package into the working environment\n\n\nsetwd()\nSet the working directory\n\n\ngetwd()\nGet the working directory\n\n\nc()\nCreate a vector\n\n\nas.numeric()\nConverts an object to a numeric vector\n\n\nas.logical()\nConverts an object to a logical vector\n\n\nas.character()\nConverts and object to a character vector\n\n\nmode()\nReturns the type of the object\n\n\nsum()\nReturns the sum of all input values\n\n\nlength()\nReturns the lenght of the obejct\n\n\nmean()\nReturns the arithmetic mean of the vector\n\n\nmedian()\nReturns the median of the vector\n\n\nsample()\nReturns a specificed size of elements from the object\n\n\nreplicate()\nRepeats an expression a specific number of times\n\n\nhist()\nCreates a histogram of given data values",
    "crumbs": [
      "Seminar 2 (28 January 2025)",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data Management in R</span>"
    ]
  },
  {
    "objectID": "data-management-in-R.html#scripts",
    "href": "data-management-in-R.html#scripts",
    "title": "3  Data Management in R",
    "section": "3.3 Scripts",
    "text": "3.3 Scripts\nYou can create a draft of your code as you go by using an R script. An R script is just a plain text file that you save R code in. You can open an R script in RStudio using the menu bar:\nFile –&gt; New File –&gt; R Script\nWe will write and edit R code in a script. This will help create a reproducible record of your work. When you’re finished for the day, you can save your script and then use it to rerun your entire analysis the next day.\nTo save a script, click the scripts pane, and then go to File –&gt; Save As in the menu bar.\n\nYou can automatically execute a line of code in a script by clicking the Run button on the top right of the pane. R will run whichever line of code your cursor is on.\nIf you have a whole section highlighted, R will run the highlighted code.\nYou can run the entire script by clicking the Source button.\nYou can use Control + Return in your keyboard as a shortcut for the Run button. On Macs, that would be Command + Return.\n\n\n\n\n\nWickham, Hadley, Mine Cetinkaya-Rundel, and Garrett Grolemund. n.d. R for Data Science. 2nd edition. O’Reilly. https://r4ds.hadley.nz/preface-2e.",
    "crumbs": [
      "Seminar 2 (28 January 2025)",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data Management in R</span>"
    ]
  },
  {
    "objectID": "importing-data-into-R.html",
    "href": "importing-data-into-R.html",
    "title": "4  Importing Data into R",
    "section": "",
    "text": "4.1 Example 1: Crime data\nThe example and instructions provided in this section is taken from (Riegler 2022).\nThe following exercise gives you a hands-on introduction to basic operations in R using a real-world data set. It begins with importing a MS-Excel data set into R and asks you to perform some basic operations to familiarise yourself with some of the commands that will be relevant for the coursework and in subsequent computer classes.\nPlease download the Excel data set called crime.xls from Aula and save it into a drive of your choice. This is a data set that contains crime levels and other socio-economic information on 46 cities across the US for the year 1982. The full version of the data set can be accessed at http://fmwww.bc.edu/ec-p/data/wooldridge/datasets.list.html. The variables are defined as follows:\nFrom here on, you need to open a R script to save all your commands to be able to replicate your results:",
    "crumbs": [
      "Seminar 2 (28 January 2025)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Importing Data into R</span>"
    ]
  },
  {
    "objectID": "importing-data-into-R.html#example-1-crime-data",
    "href": "importing-data-into-R.html#example-1-crime-data",
    "title": "4  Importing Data into R",
    "section": "",
    "text": "Variable\nDefinition\n\n\n\n\npop\nactual population in number\n\n\ncrimes\ntotal number of crimes\n\n\nunem\nunemployment rate (%)\n\n\nofficers\nnumber of police officers\n\n\npcinc\nper capita income, $\n\n\narea\nland area, square miles\n\n\nlawexpc\nlaw enforcement expenditure per capita, $\n\n\n\n\n\n4.1.1 Task 1\n\n4.1.1.1 Task\nImport the Excel data set into R.\n\n\n4.1.1.2 Guidance\nThe native data format of R is .Rdata, however, you can also open other formats, such as .xlsx, .csv, etc. Non-native data formats have to be imported rather than just opened. Before we can we can import Excel spreadsheets directly into R, we have to activate a R-library first.\nYou can either use the package manager window (in the right bottom corner of the R screen) and tick the box next to the package name or you type the following into the terminal window (in the left bottom of the R screen)\n\nlibrary(readxl)\n\nThis line loads the necessary readxl library. But you will probably receive an error message when you run the above line. This is because we first need to install the read_excel package. (Note that you will need to type the below line without the pound (hashtag) sign at the beginning of the line).\n\n# install.packages(\"readxl\")\nlibrary(readxl)\n\nThere are two ways to import:\n\nThrough command line:\n\ncrime &lt;- read_excel(\"./assets/data/crime.xls\")\n\nIn the above line, we import the dataset with the read_excel function and store it under the name crime. Notice how the new crime data is added as an object in the R environment.\nThrough menu:\nFile –&gt; Import Dataset –&gt; From Excel\n\nDon’t forget to tick the “First Row as Names” box if it is not ticked!\n\n\n\n4.1.2 Task 2\n\n4.1.2.1 Task\nView the dataset in R’s data viewer.\n\n\n4.1.2.2 Guidance\nTo open the data viewer, use the View function.\n\n# View(crime)\n\nNote that the first letter of View is capitalised.\n\n\n\n4.1.3 Task 3\n\n4.1.3.1 Task\nView the first few (six) entries of the crime data to get a feeling of what the values look like.\n\n\n4.1.3.2 Guidance\nUse the head function\n\nhead(crime)\n\n# A tibble: 6 × 7\n     pop crimes  unem officers pcinc  area lawexpc\n   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n1 229528  17136  8.20      326  8532  44.6    851.\n2 814054  75654  8.10     1621  7551 375      875.\n3 374974  31352  9         633  8343  49.8   1122.\n4 176496  15698 12.6       245  7592  74      744.\n5 288446  31202 12.6       504  7558  97.3    974.\n6 122768  16806 13.9       186  6411  55.3    762.\n\n\n\n\n\n4.1.4 Task 4\n\n4.1.4.1 Task\nLabel the variables using the definitions given above.\n\n\n4.1.4.2 Guidance\nYou have to attach a variable label to each variable. There is already a library available which facilitates the allocation of labels to variables. First, we need to install the package!\n\n# install.packages(\"expss\")\nlibrary(expss)\n\nLoading required package: maditr\n\n\n\nUse magrittr pipe '%&gt;%' to chain several operations:\n             mtcars %&gt;%\n                 let(mpg_hp = mpg/hp) %&gt;%\n                 take(mean(mpg_hp), by = am)\n        \n\ncrime &lt;- apply_labels(crime, \n                      pop = \"actual population in number\",\n                      crimes = \"total number of crimes\",\n                      unem = \"unemployment rate (%)\", \n                      officers = \"number of police officers\", \n                      pcinc = \"per capita income, $\",\n                      area = \"land area, square miles\", \n                      lawexpc = \"law enforcement expenditure per capita, $\"\n                      )\n\n\n\n\n4.1.5 Task 5\n\n4.1.5.1 Task\nCreate a new variable which measures the population density for each city.\n\n\n4.1.5.2 Guidance\nTo generate a new variable and add it to the existing crime dataset, we use the following command:\n\ncrime$popdens &lt;- crime$pop / crime$area\n\nYou may wonder why we add crime$ in front of every variable. The reason is that R can store more than one data frame, matrix, list, vector etc., at the same time, so the prefix crime$ is necessary to avoid ambiguity and ensure that we are working with variables in the crime data. Think of crime$ as an address where e.g. the variable pop stays. If you have loaded another data frame that contains a pop variable, R would know that we want to use the variable from the crime dataset and not from the other data frame. There are library packages that can facilitate the process, however, we will cover them later in the module.\nNote that the newly created population density variable is now labelled as the original population variable (pop). Let’s update the label with the method we introduced in Task 4. Note that we do not need to call the library again, as it is already called.\n\ncrime &lt;- apply_labels(crime, \n                      popdens = \"population density: pop / area\")\n\n\n\n\n4.1.6 Task 6\n\n4.1.6.1 Task\nSort the data with respect to the population density of each city.\n\n\n4.1.6.2 Guidance\nSorting data is a useful action to get a general feeling for the data, e.g. are there any outliers in the dataset? Are there any unusual patterns?\nTo change the order of the rows in a data frame, we will apply the order function. We first rank all observations with respect to the population density and store this information in a vector called rank. The rank vector contains indices that we can use to sort the crime data frame. Below, we save the sorted data under a new name, crime.popdens1\n\nrank &lt;- order(crime$popdens)\ncrime.popdens1 &lt;- crime[rank,]\n\nLet’s see the result (note. how the population density variable is now sorted from the smallest to the largest):\n\nhead(crime.popdens1)\n\n# A tibble: 6 × 8\n  pop        crimes     unem       officers   pcinc      area  lawexpc popdens  \n  &lt;labelled&gt; &lt;labelled&gt; &lt;labelled&gt; &lt;labelled&gt; &lt;labelled&gt; &lt;lab&gt; &lt;label&gt; &lt;labelle&gt;\n1 425093     38195       4.7        767       7991       604.0  570.00  703.7964\n2 268887     14537       5.5        400       7704       255.9  570.63 1050.7503\n3 462657     34736      10.4        937       7585       352.0  582.56 1314.3665\n4 451397     45503      10.4       1145       7480       316.4 1054.17 1426.6656\n5 412661     47128       8.3        719       7336       258.5  554.70 1596.3675\n6 173630     18915       8.7        366       7409       100.5  827.16 1727.6617\n\n# you may alternatively use \n# View(crime.popdens1)\n\nThis procedure sorts the data from the smallest to the largest value. To sort the data from the largest to the smallest number, we set the order argument decreasing to TRUE.\n\ncrime.popdens2 &lt;- crime[order(crime$popdens, decreasing = TRUE),]\nhead(crime.popdens2)\n\n# A tibble: 6 × 8\n  pop        crimes     unem       officers   pcinc      area  lawexpc popdens  \n  &lt;labelled&gt; &lt;labelled&gt; &lt;labelled&gt; &lt;labelled&gt; &lt;labelled&gt; &lt;lab&gt; &lt;label&gt; &lt;labelle&gt;\n1  708287     68598      8.4       1971       9265        46.4 1050.00 15264.806\n2  334414     36172     15.4       1166       4525        24.1 1139.32 13876.099\n3  365506     52901     12.3        979       6084        34.3  714.00 10656.152\n4 1181868    152962     20.3       4092       6251       135.6 1483.52  8715.840\n5  360493     28592     16.9       1034       5929        41.8  749.44  8624.235\n6  158533     15233     11.3        408       6169        18.9  661.50  8387.990\n\n\nHave you observed a slight difference in the way we sorted the data? We can save some time and space by merging the two steps into one line, however, it is sometimes easier to understand a command if it is split into separate stages.\n\n\n\n4.1.7 Task 7\n\n4.1.7.1 Task\nWhat is the minimum and maximum value for population density in the crime data?\n\n\n4.1.7.2 Guidance\nThe minimum and maximum values can be produced by generating standard descriptive statistics of the variables.\n\nsummary(crime$popdens)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  703.8  2797.1  4236.8  4967.5  7052.2 15264.8 \n\n\nBefore you finish, save the dataset under a new name. Never overwrite your original data!\n\nsave(crime, file = \"./assets/data/crime_v2.Rdata\")\n\nThe above command tells R to use the crime dataset and save it as crime_v2.Rdata. Rdata is an R specific format. R can also save data in .csv format, that can be opened with any text editor or spreadsheet software:\n\nwrite.csv(crime, file = \"./assets/data/crime_v2.csv\", row.names = TRUE) \n\nNow you are ready to answer the following questions on your own:\n\n\n\n4.1.8 Further Exercises\n\nFind the minimum and maximum number of police officers in the data set.\nCreate a new variable which measures the crime rate per 1,000 of population.\nIs the city with the highest number of police officers also the city with the highest crime density?\nHow many crimes occurred in the richest city?\nIs the richest city also the one with the highest number of police officers?\nWhat is the average unemployment rate across these 46 U.S. cities?\nDoes the city with the highest unemployment rate also have the highest crime level?\n\n\n\n\n\nRiegler, Robert. 2022. “R Workbook - Guidance for Worksheets.” Aston University.",
    "crumbs": [
      "Seminar 2 (28 January 2025)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Importing Data into R</span>"
    ]
  },
  {
    "objectID": "introduction-to-regression-analysis.html",
    "href": "introduction-to-regression-analysis.html",
    "title": "5  Introduction to Regression Analysis",
    "section": "",
    "text": "5.1 Example 1: Crime data\nThe example and instructions provided in this section is taken from (Riegler 2022).\nSuppose you are examining the relationship between number of crimes and number of police officers. Below, we will generate descriptive statistics, create a scatter plot and see how we estimate OLS regression.\nWe will use the crime data set, which is already saved in Rdata format.",
    "crumbs": [
      "Seminar 2 (28 January 2025)",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to Regression Analysis</span>"
    ]
  },
  {
    "objectID": "introduction-to-regression-analysis.html#example-1-crime-data",
    "href": "introduction-to-regression-analysis.html#example-1-crime-data",
    "title": "5  Introduction to Regression Analysis",
    "section": "",
    "text": "5.1.1 Task 1\nOpen crime_v2.Rdata (if it not already open). You may so this trough the menu or the command line using the load() function:\n\nload(\"~/Desktop/R-workshops/assets/data/crime_v2.Rdata\")\n\n\n\n5.1.2 Task 2\nCheck the summary statistics for crimes and officers variables.\n\nsummary(crime[, c(\"crimes\", \"officers\")])\n\n     crimes          officers     \n Min.   :  5276   Min.   : 109.0  \n 1st Qu.: 19658   1st Qu.: 402.8  \n Median : 32518   Median : 694.5  \n Mean   : 38123   Mean   : 902.1  \n 3rd Qu.: 49434   3rd Qu.:1212.0  \n Max.   :152962   Max.   :4092.0  \n\n\n\n# Standard deviation for the 'crimes' variable\nsd_crimes &lt;- sd(crime$crimes, na.rm = TRUE)\n\n# Standard deviation for the 'officers' variable\nsd_officers &lt;- sd(crime$officers, na.rm = TRUE)\n\n# Print the results\nsd_crimes\n\n[1] 27660.3\n\nsd_officers\n\n[1] 721.7255\n\n\nNote the na.rm = TRUE above. This argument ensures that nay NA values are removed before the calculation.\n\n\n5.1.3 Task 3\nIn addition to checking summary statistics, it is always wise to visualise your data before getting into more complicated modelling.\nFor this task, generate a scatter plot with number of crimes on the y-axis and the number of police officers on the x-axis.\n\nplot(crime$officers~crime$crimes, \n     main = \"Relationship between number of police officers and crime\")\n\n\n\n\n\n\n\n\n\n\n5.1.4 Task 4\nCalculate the Covariance and the Correlation Coefficient between number of crimes and number of police officers. Comment on their values.\n\n5.1.4.1 Guidance\nA scatter plot is a good start for identifying relationships between two variables, but it is not sufficient to identify accurately how strong the relationship is between crimes and officers. There are two numerical statistics, that provide information about the relationship between two variables: The Covariance and the Correlation Coefficient.\nTo produce a Covariance matrix, use the following command:\n\ncov(crime$officers, crime$crimes)\n\n[1] 18212436\n\n\nThe result is: 18,212,436! This number may appear to be too large but the value we obtain as covariance depends on the measuremetn levels of the variables. This measure (i.e. the covariance) does not provide any information on how strong this relationship between crimes and officers is. It only reveals that there is a positive relationship between the number of police officers and the number of crimes committed.\nInstead of using the covariance, we can use a standardised covariance - the correlation coefficient. To calculate the correlation matrix, we only have to adjust slightly the covariance command.\n\ncor(crime$officers, crime$crimes)\n\n[1] 0.9123032\n\n\nThe correlation coefficient between number of officers and crimes is 0.91. We conclude that there is a strong positive relationship between our two variables.\n\n\n\n5.1.5 Task 5\nRegress the number of police officers on crimes and comment on:\n\nthe sign and magnitude of the regression coefficients\nthe goodness of fit of the estimated model.\n\n\nlm(officers ~ crimes, data = crime)\n\n\nCall:\nlm(formula = officers ~ crimes, data = crime)\n\nCoefficients:\n(Intercept)       crimes  \n    -5.4183       0.0238  \n\n\nWe can save this estimation under an object (please note that we use model_1 below, but you may give any name as long as it satisfies the naming conventions):\n\nmodel_1 &lt;- lm(officers ~ crimes, data = crime)\n# display the model\nmodel_1\n\n\nCall:\nlm(formula = officers ~ crimes, data = crime)\n\nCoefficients:\n(Intercept)       crimes  \n    -5.4183       0.0238  \n\n\nAlthough we see the estimated coefficients in the above output we do not have information about the other statistics that we need to proceed. We use the summary() function below:\n\nsummary(model_1)\n\n\nCall:\nlm(formula = officers ~ crimes, data = crime)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-756.64 -153.71  -25.75   89.64 1000.97 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -5.418291  75.587257  -0.072    0.943    \ncrimes       0.023804   0.001611  14.777   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 298.9 on 44 degrees of freedom\nMultiple R-squared:  0.8323,    Adjusted R-squared:  0.8285 \nF-statistic: 218.4 on 1 and 44 DF,  p-value: &lt; 2.2e-16\n\n\nThe intercept term is not statistically significant.\nThe crimes variable is statistically significant at 0.1%. (Note the significance codes in the output).\nThe slope coefficient states that for every additional crime, we observe on average of 0.024 more police officers. Using more reader-friendly numbers, we can also infer that for every 1,000 additional crimes committed within a city, 24 more police officers are employed. Note how the latter way of phrasing makes more sense.\n\\(R^2\\) is the measure that provides information on the overall goodness of fit of the model. In this case it is 0.83. This means that 83% of the variation in police officers can be explained with the variation in number of crimes committed. Our estimated model has a good degree of explanatory power.\nLooking at the F-statistic (218.4 with a p-value of almost zero), we can conclude that the model, overall, is statistically significant.\n\n\n5.1.6 Task 6\nAdd a regression line to the scatter plot you created in Task 3.\n\n5.1.6.1 Guidance\nTo add a regression line to the plot, we have to use the previously saved regression object model_1 and add it to the previous scatter plot.\n\nplot(crime$officers~crime$crimes, \n     main = \"Relationship between number of police officers and crime\")\nabline(model_1)",
    "crumbs": [
      "Seminar 2 (28 January 2025)",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to Regression Analysis</span>"
    ]
  },
  {
    "objectID": "introduction-to-regression-analysis.html#example-2-wage-data",
    "href": "introduction-to-regression-analysis.html#example-2-wage-data",
    "title": "5  Introduction to Regression Analysis",
    "section": "5.2 Example 2: Wage data",
    "text": "5.2 Example 2: Wage data\n\n5.2.1 Task 1\n\n5.2.1.1 Task\nImport wage.xls data into R and view the first few rows of the data to have an idea about the contents of the variables, and then save the data in R format.\n\n\n5.2.1.2 Guidance\nUse read_excel() and head() functions.\n\n# install.packages(\"readxl\")\nlibrary(readxl)\n\n# Import Excel data\nwage2 &lt;- read_excel(\"./assets/data/wage2.xls\", sheet = \"wage2\")\n\n\nhead(wage2)\n\n# A tibble: 6 × 15\n   wage hours    IQ   KWW  educ exper tenure   age married south urban  sibs\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1   769    40    93    35    12    11      2    31       1     0     1     1\n2   808    50   119    41    18    11     16    37       1     0     1     1\n3   825    40   108    46    14    11      9    33       1     0     1     1\n4   650    40    96    32    12    13      7    32       1     0     1     4\n5   562    40    74    27    11    14      5    34       1     0     1    10\n6  1400    40   116    43    16    14      2    35       1     0     1     1\n# ℹ 3 more variables: brthord &lt;dbl&gt;, meduc &lt;dbl&gt;, feduc &lt;dbl&gt;\n\n\n\n# Save data in R format\nsave(wage2, file = \"./assets/data/wage2.Rdata\")\n\n\n\n\n5.2.2 Task 2\n\n5.2.2.1 Task\nLabel variable educ as “years of schooling” and exper as “years of experience”.\n\n\n5.2.2.2 Guidance\nWe will need the expss package to label the variables. The installation and calling of the package is deactivated below since we already have done these steps above. After running the below command check the changes in the data from the Environment window on the top-right.\n\n# install.packages(\"expss\")\nlibrary(expss)\n\nLoading required package: maditr\n\n\n\nTo drop variable use NULL: let(mtcars, am = NULL) %&gt;% head()\n\n\n\nUse 'expss_output_rnotebook()' to display tables inside R Notebooks.\n To return to the console output, use 'expss_output_default()'.\n\nwage2 &lt;- apply_labels(wage2, \n                      educ = \"years of schooling\", \n                      exper = \"years of experince\")\n\n\n\n\n5.2.3 Task 3\n\n5.2.3.1 Task\nGenerate two new variables: hourly wage and logarithmic wage.\n\n\n5.2.3.2 Guidance\n\n# Generate new variables\nwage2$hourly_wage &lt;- wage2$wage / wage2$hours\nwage2$ln_wage &lt;- log(wage2$wage)\n\n\n\n\n5.2.4 Task 4\n\n5.2.4.1 Task\nCheck the summary statistics for (i) the wage variable, (ii) for all variables.\n\n\n5.2.4.2 Guidance\nWe will use the summary() function.\n\n# Summary statistics for the wage variable only\nsummary(wage2$wage)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  115.0   669.0   905.0   957.9  1160.0  3078.0 \n\n\n\n# Summary statistics for all variables in wage2 data\nsummary(wage2)\n\n      wage            hours             IQ             KWW       \n Min.   : 115.0   Min.   :20.00   Min.   : 50.0   Min.   :12.00  \n 1st Qu.: 669.0   1st Qu.:40.00   1st Qu.: 92.0   1st Qu.:31.00  \n Median : 905.0   Median :40.00   Median :102.0   Median :37.00  \n Mean   : 957.9   Mean   :43.93   Mean   :101.3   Mean   :35.74  \n 3rd Qu.:1160.0   3rd Qu.:48.00   3rd Qu.:112.0   3rd Qu.:41.00  \n Max.   :3078.0   Max.   :80.00   Max.   :145.0   Max.   :56.00  \n                                                                 \n      educ           exper           tenure            age       \n Min.   : 9.00   Min.   : 1.00   Min.   : 0.000   Min.   :28.00  \n 1st Qu.:12.00   1st Qu.: 8.00   1st Qu.: 3.000   1st Qu.:30.00  \n Median :12.00   Median :11.00   Median : 7.000   Median :33.00  \n Mean   :13.47   Mean   :11.56   Mean   : 7.234   Mean   :33.08  \n 3rd Qu.:16.00   3rd Qu.:15.00   3rd Qu.:11.000   3rd Qu.:36.00  \n Max.   :18.00   Max.   :23.00   Max.   :22.000   Max.   :38.00  \n                                                                 \n    married          south            urban             sibs       \n Min.   :0.000   Min.   :0.0000   Min.   :0.0000   Min.   : 0.000  \n 1st Qu.:1.000   1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.: 1.000  \n Median :1.000   Median :0.0000   Median :1.0000   Median : 2.000  \n Mean   :0.893   Mean   :0.3412   Mean   :0.7176   Mean   : 2.941  \n 3rd Qu.:1.000   3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.: 4.000  \n Max.   :1.000   Max.   :1.0000   Max.   :1.0000   Max.   :14.000  \n                                                                   \n    brthord           meduc           feduc        hourly_wage    \n Min.   : 1.000   Min.   : 0.00   Min.   : 0.00   Min.   :  2.30  \n 1st Qu.: 1.000   1st Qu.: 8.00   1st Qu.: 8.00   1st Qu.: 15.07  \n Median : 2.000   Median :12.00   Median :10.00   Median : 21.02  \n Mean   : 2.277   Mean   :10.68   Mean   :10.22   Mean   : 22.32  \n 3rd Qu.: 3.000   3rd Qu.:12.00   3rd Qu.:12.00   3rd Qu.: 27.70  \n Max.   :10.000   Max.   :18.00   Max.   :18.00   Max.   :102.60  \n NA's   :83       NA's   :78      NA's   :194                     \n    ln_wage     \n Min.   :4.745  \n 1st Qu.:6.506  \n Median :6.808  \n Mean   :6.779  \n 3rd Qu.:7.056  \n Max.   :8.032  \n                \n\n\n\n\n\n5.2.5 Task 5\n\n5.2.5.1 Task\nCalculate the correlation coefficient between wage and education.\n\n\n5.2.5.2 Guidance\nWe can calculate the correlation coefficients using the cor() function. In the first example below, the correlation coefficient is reported as a single number, while in the second example, we get a correlation matrix.\nIn most of empirical work, we are usually interested with pairwise correlations among all variables. Hence, we may use the correlation matrix to check the binary correlations among all variables in our sample. This is provided in the third example below.\nThe \"use = complete.obs\" added to the commands below asks R to handle missing values by casewise deletion.\n\n# Correlation\ncor(wage2$wage, wage2$educ)\n\n[1] 0.3271087\n\n\n\n# Correlation\ncor(wage2[, c(\"wage\", \"educ\")], use = \"complete.obs\")\n\n          wage      educ\nwage 1.0000000 0.3271087\neduc 0.3271087 1.0000000\n\n\n\ncor(wage2, use = \"pairwise.complete.obs\")\n\n                    wage        hours          IQ         KWW        educ\nwage         1.000000000 -0.009504302  0.30908783  0.32613058  0.32710869\nhours       -0.009504302  1.000000000  0.07383930  0.11388938  0.09100889\nIQ           0.309087827  0.073839301  1.00000000  0.41351552  0.51569701\nKWW          0.326130577  0.113889381  0.41351552  1.00000000  0.38813424\neduc         0.327108690  0.091008888  0.51569701  0.38813424  1.00000000\nexper        0.002189702 -0.062126227 -0.22491253  0.01745245 -0.45557312\ntenure       0.128266391 -0.055528006  0.04215883  0.14139800 -0.03616655\nage          0.156701761  0.024811636 -0.04374091  0.39305297 -0.01225396\nmarried      0.136582670  0.032563350 -0.01466753  0.08994782 -0.05856602\nsouth       -0.159387287 -0.029519177 -0.20978466 -0.09439242 -0.09703298\nurban        0.198406472  0.016573046  0.03893553  0.09819025  0.07215091\nsibs        -0.159203728 -0.049602555 -0.28477277 -0.28497534 -0.23928810\nbrthord     -0.145485385 -0.043129582 -0.17943947 -0.15358472 -0.20499246\nmeduc        0.214831839  0.076619806  0.33180383  0.24079168  0.36423913\nfeduc        0.237586922  0.063172297  0.34390758  0.23488927  0.42692545\nhourly_wage  0.931240501 -0.317645466  0.26502635  0.26059936  0.27167136\nln_wage      0.953141156 -0.047219079  0.31478770  0.30627128  0.31211665\n                   exper      tenure          age      married       south\nwage         0.002189702  0.12826639  0.156701761  0.136582670 -0.15938729\nhours       -0.062126227 -0.05552801  0.024811636  0.032563350 -0.02951918\nIQ          -0.224912532  0.04215883 -0.043740911 -0.014667528 -0.20978466\nKWW          0.017452446  0.14139800  0.393052967  0.089947816 -0.09439242\neduc        -0.455573115 -0.03616655 -0.012253956 -0.058566019 -0.09703298\nexper        1.000000000  0.24365440  0.495329763  0.106349115  0.02125724\ntenure       0.243654402  1.00000000  0.270601647  0.072605374 -0.06169141\nage          0.495329763  0.27060165  1.000000000  0.106980249 -0.02947768\nmarried      0.106349115  0.07260537  0.106980249  1.000000000  0.02275672\nsouth        0.021257241 -0.06169141 -0.029477681  0.022756718  1.00000000\nurban       -0.047385845 -0.03848582 -0.006749288 -0.040248179 -0.10989797\nsibs         0.064310470 -0.03916116 -0.040719238 -0.004327422  0.06631979\nbrthord      0.088300019 -0.02847775  0.005435916 -0.014737189  0.09370679\nmeduc       -0.186317286 -0.01496769 -0.029319099 -0.022763437 -0.15787359\nfeduc       -0.256792630 -0.05924123 -0.071303285 -0.020324390 -0.17236334\nhourly_wage  0.017757793  0.13541822  0.126683019  0.115115701 -0.14716118\nln_wage      0.020601158  0.18585262  0.161822314  0.149975894 -0.19481092\n                   urban         sibs      brthord       meduc       feduc\nwage         0.198406472 -0.159203728 -0.145485385  0.21483184  0.23758692\nhours        0.016573046 -0.049602555 -0.043129582  0.07661981  0.06317230\nIQ           0.038935525 -0.284772765 -0.179439471  0.33180383  0.34390758\nKWW          0.098190247 -0.284975345 -0.153584717  0.24079168  0.23488927\neduc         0.072150908 -0.239288104 -0.204992462  0.36423913  0.42692545\nexper       -0.047385845  0.064310470  0.088300019 -0.18631729 -0.25679263\ntenure      -0.038485824 -0.039161158 -0.028477749 -0.01496769 -0.05924123\nage         -0.006749288 -0.040719238  0.005435916 -0.02931910 -0.07130328\nmarried     -0.040248179 -0.004327422 -0.014737189 -0.02276344 -0.02032439\nsouth       -0.109897970  0.066319792  0.093706790 -0.15787359 -0.17236334\nurban        1.000000000 -0.031468824  0.002419787  0.03402366  0.11223944\nsibs        -0.031468824  1.000000000  0.593913799 -0.28715120 -0.23202649\nbrthord      0.002419787  0.593913799  1.000000000 -0.27593376 -0.23037060\nmeduc        0.034023660 -0.287151198 -0.275933760  1.00000000  0.57649476\nfeduc        0.112239438 -0.232026494 -0.230370600  0.57649476  1.00000000\nhourly_wage  0.189240304 -0.131364072 -0.120293460  0.18348733  0.20469678\nln_wage      0.203797585 -0.152809172 -0.141852712  0.21357476  0.22338514\n            hourly_wage     ln_wage\nwage         0.93124050  0.95314116\nhours       -0.31764547 -0.04721908\nIQ           0.26502635  0.31478770\nKWW          0.26059936  0.30627128\neduc         0.27167136  0.31211665\nexper        0.01775779  0.02060116\ntenure       0.13541822  0.18585262\nage          0.12668302  0.16182231\nmarried      0.11511570  0.14997589\nsouth       -0.14716118 -0.19481092\nurban        0.18924030  0.20379758\nsibs        -0.13136407 -0.15280917\nbrthord     -0.12029346 -0.14185271\nmeduc        0.18348733  0.21357476\nfeduc        0.20469678  0.22338514\nhourly_wage  1.00000000  0.89974921\nln_wage      0.89974921  1.00000000\n\n\nThe above table is informative but the reported numbers have far too many decimals. It is distracting our focus. Below, we round these in two decimal points, which is enough to have an idea about the strength of the correlation between our variables\n\n# Calculate pairwise correlations and store them under name cor_matrix\ncor_matrix &lt;- cor(wage2, use = \"pairwise.complete.obs\")\n\n# Round the correlation values to 2 decimal places and save them under the name rounded_cor_matrix\nrounded_cor_matrix &lt;- round(cor_matrix, 2)\n\n# Display the rounded correlation matrix\nprint(rounded_cor_matrix)\n\n             wage hours    IQ   KWW  educ exper tenure   age married south\nwage         1.00 -0.01  0.31  0.33  0.33  0.00   0.13  0.16    0.14 -0.16\nhours       -0.01  1.00  0.07  0.11  0.09 -0.06  -0.06  0.02    0.03 -0.03\nIQ           0.31  0.07  1.00  0.41  0.52 -0.22   0.04 -0.04   -0.01 -0.21\nKWW          0.33  0.11  0.41  1.00  0.39  0.02   0.14  0.39    0.09 -0.09\neduc         0.33  0.09  0.52  0.39  1.00 -0.46  -0.04 -0.01   -0.06 -0.10\nexper        0.00 -0.06 -0.22  0.02 -0.46  1.00   0.24  0.50    0.11  0.02\ntenure       0.13 -0.06  0.04  0.14 -0.04  0.24   1.00  0.27    0.07 -0.06\nage          0.16  0.02 -0.04  0.39 -0.01  0.50   0.27  1.00    0.11 -0.03\nmarried      0.14  0.03 -0.01  0.09 -0.06  0.11   0.07  0.11    1.00  0.02\nsouth       -0.16 -0.03 -0.21 -0.09 -0.10  0.02  -0.06 -0.03    0.02  1.00\nurban        0.20  0.02  0.04  0.10  0.07 -0.05  -0.04 -0.01   -0.04 -0.11\nsibs        -0.16 -0.05 -0.28 -0.28 -0.24  0.06  -0.04 -0.04    0.00  0.07\nbrthord     -0.15 -0.04 -0.18 -0.15 -0.20  0.09  -0.03  0.01   -0.01  0.09\nmeduc        0.21  0.08  0.33  0.24  0.36 -0.19  -0.01 -0.03   -0.02 -0.16\nfeduc        0.24  0.06  0.34  0.23  0.43 -0.26  -0.06 -0.07   -0.02 -0.17\nhourly_wage  0.93 -0.32  0.27  0.26  0.27  0.02   0.14  0.13    0.12 -0.15\nln_wage      0.95 -0.05  0.31  0.31  0.31  0.02   0.19  0.16    0.15 -0.19\n            urban  sibs brthord meduc feduc hourly_wage ln_wage\nwage         0.20 -0.16   -0.15  0.21  0.24        0.93    0.95\nhours        0.02 -0.05   -0.04  0.08  0.06       -0.32   -0.05\nIQ           0.04 -0.28   -0.18  0.33  0.34        0.27    0.31\nKWW          0.10 -0.28   -0.15  0.24  0.23        0.26    0.31\neduc         0.07 -0.24   -0.20  0.36  0.43        0.27    0.31\nexper       -0.05  0.06    0.09 -0.19 -0.26        0.02    0.02\ntenure      -0.04 -0.04   -0.03 -0.01 -0.06        0.14    0.19\nage         -0.01 -0.04    0.01 -0.03 -0.07        0.13    0.16\nmarried     -0.04  0.00   -0.01 -0.02 -0.02        0.12    0.15\nsouth       -0.11  0.07    0.09 -0.16 -0.17       -0.15   -0.19\nurban        1.00 -0.03    0.00  0.03  0.11        0.19    0.20\nsibs        -0.03  1.00    0.59 -0.29 -0.23       -0.13   -0.15\nbrthord      0.00  0.59    1.00 -0.28 -0.23       -0.12   -0.14\nmeduc        0.03 -0.29   -0.28  1.00  0.58        0.18    0.21\nfeduc        0.11 -0.23   -0.23  0.58  1.00        0.20    0.22\nhourly_wage  0.19 -0.13   -0.12  0.18  0.20        1.00    0.90\nln_wage      0.20 -0.15   -0.14  0.21  0.22        0.90    1.00\n\n\n\n\n\n5.2.6 Task 6\n\n5.2.6.1 Task\nExamine the relationship between education and wage using a scatter plot.\n\n\n5.2.6.2 Guidance\nWe use the ggplot2 package to draw plots. First install the package and call the library.\n\n# install.packages(\"ggplot2\")\n library(ggplot2)\n\n\nAttaching package: 'ggplot2'\n\n\nThe following object is masked from 'package:expss':\n\n    vars\n\n\nEducation is expected to have a positive impact on wage. In our scatter plot, educ will be on the horizontal-axis while wage will be on the vertical-axis.\n\n# Scatter plot\nggplot(wage2, aes(x = educ, y = wage)) +\n  geom_point() +\n  labs(title = \"Scatter plot of Wage vs. Education\", x = \"Years of Schooling\", y = \"Wage\")\n\n\n\n\n\n\n\n\nYou see above the full set of lines to create this plot. But let us do this step by step to have a better understanding. First, we bring the educ and wage variables from the wage2 data and position these on our plot.\n\nggplot(wage2, aes(x = educ, y = wage))\n\n\n\n\n\n\n\n\nWe then add (using the + sign), the observations in our data, represented by dots.\n\nggplot(wage2, aes(x = educ, y = wage)) +\n  geom_point() \n\n\n\n\n\n\n\n\nIt is always good practice to give a title for your plot. Notice also that the horizontal and vertical axes above are labelled by the variable names. We may also replace these with proper definitions of the variables. This is to make it easier for the readers to understand your plots:\n\nggplot(wage2, aes(x = educ, y = wage)) +\n  geom_point() +\n  labs(title = \"Scatter plot of Wage vs. Education\", x = \"Years of Schooling\", y = \"Wage\")\n\n\n\n\n\n\n\n\n\n\n\n5.2.7 Task 7\n\n5.2.7.1 Task\nTabulate the urban variable to see the distribution of observations in rural and urban areas\n\n\n5.2.7.2 Guidance\nWe use the table() function for that purpose.\n\ntable(wage2$urban)\n\n\n  0   1 \n264 671 \n\n\n\n\n\n5.2.8 Task 8\n\n5.2.8.1 Task\nLet’s say we are interested to plot the education-wage relationship differentiating between people in rural and urban areas. Replicate the scatter plot above, but this time, using different colors for rural and urban.\n\n\n5.2.8.2 Guidance\nNotice how we add the color = urban option below. We do the same for the label too.\n\n# Scatter plot - colored by urban\nggplot(wage2, aes(x = educ, y = wage, color = urban)) +\n  geom_point() +\n  labs(title = \"Scatter plot of Wage vs. Education\", x = \"Years of Schooling\", y = \"Wage\", color = \"urban\")\n\n\n\n\n\n\n\n\nThe labelling of the above plot looks as if we have a range of values for the urban variable, changing from zero to one. The urban variable, in fact, is a dummy, taking two values only: zero for rural and one for urban residence. If you look into this variable entry in more detail, you will see that it is stored as num. We can change this using the factor() function. Instead of overriding the urban variable, let’s create a new variable urban_residence to see a comparison.\n\nwage2$urban_residence &lt;- factor(wage2$urban, levels = c(0,1), labels = c(\"rural\", \"urban\"))\n\nBelow, we view the two variables using R’s dplyr package.\n\n# install.packages(\"dplyr\")\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:expss':\n\n    compute, contains, na_if, recode, vars, where\n\n\nThe following objects are masked from 'package:maditr':\n\n    between, coalesce, first, last\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nView(select(wage2, urban, urban_residence))\n\nLet’s re-run our scatter plot code again (but replacing urban with urban_residence:\n\n# Scatter plot - colored by urban\nggplot(wage2, aes(x = educ, y = wage, color = urban_residence)) +\n  geom_point() +\n  labs(title = \"Scatter plot of Wage vs. Education\", x = \"Years of Schooling\", y = \"Wage\", color = \"urban_residence\")\n\n\n\n\n\n\n\n\n\n\n\n5.2.9 Task 9\n\n5.2.9.1 Task\nEstimate a regression model where wage is regressed on education. Interpret the results.\n\n\n5.2.9.2 Guidance\nWe use the lm() function to estimate linear regression models. You may read ~ in wage ~ educ below as “approximately modelled as” James et al. (2023). We may also say “wage is regressed on education”.\n\n# Linear regression\nmodel_1 &lt;- lm(wage ~ educ, data = wage2)\nsummary(model_1)\n\n\nCall:\nlm(formula = wage ~ educ, data = wage2)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-877.38 -268.63  -38.38  207.05 2148.26 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  146.952     77.715   1.891   0.0589 .  \neduc          60.214      5.695  10.573   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 382.3 on 933 degrees of freedom\nMultiple R-squared:  0.107, Adjusted R-squared:  0.106 \nF-statistic: 111.8 on 1 and 933 DF,  p-value: &lt; 2.2e-16\n\n\nIn the above regression output, we see that education has a statistically significant impact on wages. Each year of schooling increases wage by around £60, on average. The F test tells us that the regression model has an explanatory power, even though the R-squared value is low.\n\n\n\n5.2.10 Task 10\n\n5.2.10.1 Task\nUsing the regression model above, predict what the wage would be for given values of education (how much do we expect the wage would be for given years of schooling).\n\n\n5.2.10.2 Guidance\nBelow, we recall model_1 to calculate predicted values; save the predictions under name wage_hat under wage2 data.\n\n# Save predicted values under name wage_hat\nwage2$wage_hat &lt;- predict(model_1)\n\n\n\n\n5.2.11 Task 11\n\n5.2.11.1 Task\nAdd the estimated regression line to the wage-education scatter plot.\n\n\n5.2.11.2 Guidance\nWe will be adding the regression line to the scatter plot we produced above. We use geom_smooth for this purpose. Let’s first remember what we did before:\n\n# Scatter plot of education and wage\nggplot(wage2, aes(x = educ, y = wage)) +\n  geom_point() +\n  labs(title = \"Scatter plot with Fitted Line\", x = \"Years of Schooling\", y = \"Wage\")\n\n\n\n\n\n\n\n\nNow, let’s add the regression line:\n\n# Scatter plot with fitted line\nggplot(wage2, aes(x = educ, y = wage)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  labs(title = \"Scatter plot with Fitted Line\", x = \"Years of Schooling\", y = \"Wage\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nthe geom_smooth(method = \"lm\") asks R to add a line estimating a “linear model” (i.e. a regression) of wage on educ.\nNote that we could save this plot as an object by assigning it a name on the left hand side of the command. We will do that below and name the plot as scatter_wage_educ.\nCan you guess what the plot would look if we changed se = FALSE to se = TRUE above? We can also try that below:\n\n# Scatter plot with fitted line\nscatter_wage_educ &lt;- ggplot(wage2, aes(x = educ, y = wage)) +\n                        geom_point() +\n                        geom_smooth(method = \"lm\", se = TRUE) +\n                        labs(title = \"Scatter plot with Fitted Line\", x = \"Years of Schooling\", y = \"Wage\")\nprint(scatter_wage_educ)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nWe could also add this sample regression line by using the wage_hat variable. wage_hat shows the predicted value of wage given observed values of education.\n\n# Scatter plot with fitted line\n# we add the wage_hat variable\nggplot(wage2, aes(x = educ, y = wage)) +\n  geom_point() +\n  geom_line(aes(y = wage_hat), color = \"blue\", size = 1) +\n  labs(title = \"Scatter plot with Fitted Line\", x = \"Years of Schooling\", y = \"Wage\")\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\nNote that we used geom_line() this time to add a line plot of an already existing variable in the data set.\n\nggplot(wage2, aes(x = educ, y = wage)) creates a canvas, a plot area with educ at the horizontal and wage at the vertical axis\ngeom_point() adds a scatterplot of wage against educ.\ngeom_line(aes(y = wage_hat)) adds the line for the predicted wage_hat values. The aes(y = wage_hat) ensures the line graph uses wage_hat on the y-axis while sharing the x-axis (educ).\ncolor and size are optional for styling the line. Try experimenting with these and observe the changes.\n\n\n\n\n5.2.12 Task 12\n\n5.2.12.1 Task\nEstimate a multiple regression model by adding experience and urban residence into the above regression. Save it under name model_2\n\n\n5.2.12.2 Guidance\nWe will add exper and urban variables into the regression model using + sign.\n\n# Linear regression\nmodel_2 &lt;- lm(wage ~ educ + exper + urban, data = wage2)\nsummary(model_2)\n\n\nCall:\nlm(formula = wage ~ educ + exper + urban, data = wage2)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-799.67 -234.04  -34.26  197.89 2119.62 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -362.821    106.419  -3.409 0.000679 ***\neduc          74.119      6.193  11.968  &lt; 2e-16 ***\nexper         17.940      3.105   5.777 1.03e-08 ***\nurban        160.306     26.920   5.955 3.69e-09 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 369.5 on 931 degrees of freedom\nMultiple R-squared:  0.1676,    Adjusted R-squared:  0.1649 \nF-statistic: 62.47 on 3 and 931 DF,  p-value: &lt; 2.2e-16\n\n\nHow does model_2 compare to model_1?\n\n\n\n5.2.13 Task 13\n\n5.2.13.1 Task\nSave your data to keep the newly created hourly_wage and ln_wage variables.\n\n\n5.2.13.2 Guidance\n\n# Save data in R format\nsave(wage2, file = \"./assets/data/wage2.Rdata\")\n\n\n\n\n5.2.14 A Gentle Introduction to dplyr library\nThe dplyr library comes with R’s tidyverse package. The ggplot2 library we used above to produce plots is also a part of the tidyverse package.\nI will replicate below a few of the tasks that we performed above using the dplyr library\n\n5.2.14.1 Viewing data\nWe have seen before to use View to see the contents of data in a spreadsheet format:\n\nView(wage2)\n\nWe may use dplyr to select variables for viewing. Using select allows us to “keep or drop columns using their names and types”.\n\nView(select(wage2, wage, educ, exper, urban, urban_residence))\n\n\n\n5.2.14.2 Generating new variables\nWe used the following lines to create hourly_wage and ln_wage variables:\n\n# Generate new variables\nwage2$hourly_wage &lt;- wage2$wage / wage2$hours\nwage2$ln_wage &lt;- log(wage2$wage)\n\ndplyr ’s mutate us used to “create, modify, and delete columns”. Let us create a new data frame, wage2_new to see what it does:\n\nwage2_new &lt;- wage2 %&gt;% \n  mutate (\n    hourly_wage_n = wage / hours,\n    ln_wage_n = log(wage)\n  )\n\nIn the above lines, we create a new data frame based on wage2 . Note the %&gt;% above. This is a part of the command and is called the pipe operator. It helps us to simply the code and do the operations one step after another. We first call wage2 and create the new variables, hourly_wage_n and ln_wage_n .\nNote how we avoided the use of wage2$ every time we referred to a variable in wage2 data.\nAnother example we used to create a new variable was when we predicted values of wage for given levels of education after estimating model_1.\nBelow is the code we used:\n\nwage2$wage_hat &lt;- predict(model_1)\n\nWe can do this as follows using dplyr\n\nwage2 &lt;- wage2 %&gt;% \n  mutate(\n    wage_hat_n = predict(model_1)\n  )\n\n\n\n5.2.14.3 Tabulating Variables\nWe used the code below to tabulate values of urban variable\n\ntable(wage2$urban)\n\n\n  0   1 \n264 671 \n\n\nwe may use count in dplyr for this purpose\n\nwage2 %&gt;% \n  count(urban)\n\n# A tibble: 2 × 2\n  urban     n\n  &lt;dbl&gt; &lt;int&gt;\n1     0   264\n2     1   671\n\n\nRemember that we could save this as a new object:\n\nurban_table &lt;- wage2 %&gt;% \n  count(urban)\nprint(urban_table)\n\n# A tibble: 2 × 2\n  urban     n\n  &lt;dbl&gt; &lt;int&gt;\n1     0   264\n2     1   671\n\n\nWhich output do you prefer?",
    "crumbs": [
      "Seminar 2 (28 January 2025)",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to Regression Analysis</span>"
    ]
  },
  {
    "objectID": "introduction-to-regression-analysis.html#further-exercises",
    "href": "introduction-to-regression-analysis.html#further-exercises",
    "title": "5  Introduction to Regression Analysis",
    "section": "5.3 Further Exercises",
    "text": "5.3 Further Exercises\nDownload the data set called EAWE21.Rdata from the module page on Aula and save it. This is a subset of the Educational Attainment and Wage Equations data set used in Dougherty (2016) available from https://global.oup.com/uk/orc/busecon/economics/dougherty5e/student/datasets/eawe/. For this exercise we are interested in two variables:\n\nEXP : Total out-of-school work experience (years) as of the 2002 interview\nEARNINGS : Current hourly earnings in $ reported at the 2002 interview\n\n\n5.3.1 Tasks\n\nCalculate summary statistics (mean, median, minimum, maximum) for the variables EXP and EARNINGS\nDraw scatter plot of EARNINGS on EXP.\nCalculate the covariance and correlation between earnings and exp and comment on the values\nRegress EARNINGS on EXP and comment on\n\nthe sign and size of the regression coefficients\nthe goodness of fits of the estimated model.\n\nAdd a regression line to the scatter plot.\n\n\n\n\n\nJames, Gareth, Daniela Witten, Trevor Hastie, and Rob Tibshirani. 2023. An Introduction to Statistical Learning. 2nd edition. Springer. https://www.statlearning.com.\n\n\nRiegler, Robert. 2022. “R Workbook - Guidance for Worksheets.” Aston University.",
    "crumbs": [
      "Seminar 2 (28 January 2025)",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to Regression Analysis</span>"
    ]
  },
  {
    "objectID": "multiple-regression-and-diagnostic-checks.html",
    "href": "multiple-regression-and-diagnostic-checks.html",
    "title": "6  Multiple Regression and Diagnostic Checks",
    "section": "",
    "text": "6.1 Example: wage data\nWe will use the wage2 data set, which is already saved in Rdata format.",
    "crumbs": [
      "Seminar 3 (4 February 2025)",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Multiple Regression and Diagnostic Checks</span>"
    ]
  },
  {
    "objectID": "multiple-regression-and-diagnostic-checks.html#example-wage-data",
    "href": "multiple-regression-and-diagnostic-checks.html#example-wage-data",
    "title": "6  Multiple Regression and Diagnostic Checks",
    "section": "",
    "text": "6.1.1 Task 1\nOpen wage2.Rdata (if it is not already open). You may so this through the menu or the command line using the load() function:\n\nload(\"~/Desktop/R-workshops/assets/data/wage2.Rdata\")\n\n\n\n6.1.2 Task 2\nEstimate a multiple regression model by regressing wage on IQ, educ, exper, urban, married and save it under name model_3 . Display the estimation results.\n\n6.1.2.1 Guidance\n\n# Linear regression\nmodel_3 &lt;- lm(wage ~ IQ + educ + exper + urban, data = wage2)\nsummary(model_3)\n\n\nCall:\nlm(formula = wage ~ IQ + educ + exper + urban, data = wage2)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-797.64 -229.84  -38.35  185.10 2082.22 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -628.8654   115.5135  -5.444 6.66e-08 ***\nIQ             5.0564     0.9234   5.476 5.60e-08 ***\neduc          56.0554     6.9340   8.084 1.94e-15 ***\nexper         17.7194     3.0583   5.794 9.41e-09 ***\nurban        159.9813    26.5107   6.035 2.30e-09 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 363.9 on 930 degrees of freedom\nMultiple R-squared:  0.1936,    Adjusted R-squared:  0.1901 \nF-statistic: 55.81 on 4 and 930 DF,  p-value: &lt; 2.2e-16\n\n\n\n\n\n6.1.3 Task 3\n\n6.1.3.1 Task\nTest for the normality of the residuals\n\n\n6.1.3.2 Guidance\nWe will be using the Jarque-Bera test for this purpose.\nWe first save the residuals from model_3 .\n\nwage2$resid_m3 &lt;- residuals(model_3)\n\nPlot the residuals to see the distribution. Please note that is not a part of the test but visualisation helps us to understand the data better.\n\nlibrary(ggplot2)\nggplot(wage2, aes(x = resid_m3)) +\n  geom_histogram(binwidth = 200, fill = \"skyblue\", color = \"black\") +\n  labs(title = \"Histogram of Residuals (model_3)\", x = \"Residuals\", y = \"Frequency\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\naes(x = resid) specifies the residuals as the variable for the x-axis.\ngeom_histogram() is used to create the histogram:\n\nbinwidth = 200 controls the width of the bins. You can adjust this depending on how detailed you want the histogram to be.\nfill sets the color inside the bars, and color adds a border around them for better visibility.\n\nlabs() adds labels for the title and axes.\ntheme_minimal() gives a clean, simple look to the plot - try the plot with and without this.\n\nYou may also let ggplot choose the number of bins automatically:\n\nggplot(wage2, aes(x = resid_m3)) +\n  geom_histogram(fill = \"pink\", color = \"black\") +\n  labs(title = \"Histogram of Residuals (model_3)\", x = \"Residuals\", y = \"Frequency\") +\n  theme_minimal()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nWe may use jarque.bera.test for the normality test. It is in the tseries package.\n\n# install.packages(\"tseries\")\nlibrary(tseries)\n\nRegistered S3 method overwritten by 'quantmod':\n  method            from\n  as.zoo.data.frame zoo \n\njarque.bera.test(wage2$resid_m3)\n\n\n    Jarque Bera Test\n\ndata:  wage2$resid_m3\nX-squared = 699.59, df = 2, p-value &lt; 2.2e-16\n\n\nThe p-value of the test is almost zero. We reject the null hypothesis of normal distribution. The residuals from model_3 are not normally distributed.\n\n\n\n6.1.4 Task 4\n\n6.1.4.1 Task\nTest for the functional form.\n\n\n6.1.4.2 Guidance\nWe may use this to check whether there are any omitted variables or non-linearity in the model. The test is Ramsey RESET.\n\nlibrary(lmtest)\n\nLoading required package: zoo\n\n\n\nAttaching package: 'zoo'\n\n\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric\n\nresettest(model_3)\n\n\n    RESET test\n\ndata:  model_3\nRESET = 3.8665, df1 = 2, df2 = 928, p-value = 0.02127\n\n\nThe default resettest includes second and third powers of the fitted values in the test regression. You may change this using the power option. Below we include from second to the fourth power of fitted values.\n\nresettest(model_3, power = 2:4)\n\n\n    RESET test\n\ndata:  model_3\nRESET = 2.8504, df1 = 3, df2 = 927, p-value = 0.03646\n\n\nThe decision depends on the chosen significance level. We reject the null hypothesis of correct functional form if we choose a 5% significance level.\n\n\n\n6.1.5 Task 5\n\n6.1.5.1 Task\nTest for heteroscedasticity.\n\n\n6.1.5.2 Guidance\nWe apply Breusch-Pagan heteroscedasticity test.\n\nbptest(model_3)\n\n\n    studentized Breusch-Pagan test\n\ndata:  model_3\nBP = 16.355, df = 4, p-value = 0.002578\n\n\nThe p-value is smaller than 0.05. Hence, we reject the null of no heteroscedasticity at 5% significance level. There is heteroscedasticity.\n\n\n\n6.1.6 Task 6\n\n6.1.6.1 Task\nTest for autocorrelation in the model\n\n\n6.1.6.2 Guidance\nThis is a trick question! Autocorrelation problem is related to time series data whereas we have cross-section data here. Autocorrelation problem is irrelevant here.\n\n\n\n6.1.7 Task 7\n\n6.1.7.1 Task\nReplicate the above using logarithmic wages. Has there been a change in model diagnostics? Which form do you prefer to use for inference?\n\n\n6.1.7.2 Guidance\nYou may use the script file to copy-paste all the code and make the minor changes (i.e. replacement of wage with ln_wage).",
    "crumbs": [
      "Seminar 3 (4 February 2025)",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Multiple Regression and Diagnostic Checks</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "James, Gareth, Daniela Witten, Trevor Hastie, and Rob Tibshirani. 2023.\nAn Introduction to Statistical Learning. 2nd edition. Springer.\nhttps://www.statlearning.com.\n\n\nRiegler, Robert. 2022. “R Workbook - Guidance for\nWorksheets.” Aston University.\n\n\nWickham, Hadley, Mine Cetinkaya-Rundel, and Garrett Grolemund. n.d.\nR for Data Science. 2nd edition. O’Reilly. https://r4ds.hadley.nz/preface-2e.",
    "crumbs": [
      "Seminar 3 (4 February 2025)",
      "References"
    ]
  }
]